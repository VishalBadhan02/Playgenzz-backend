"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Namespaces = void 0;
class Namespaces {
    parsed = { allowed: false, children: {} };
    constructor(debugspec) {
        this.update(debugspec);
    }
    update(debugspec) {
        const parsed = this.parsed;
        const debugs = debugspec.split(/[\s,]+/).map(each => each.trim());
        for (const item of debugs) {
            const negative = item.startsWith("-");
            const chain = item.slice(negative ? 1 : 0).split(":");
            let current = parsed;
            for (const part of chain) {
                if (part === "*")
                    break;
                const picked = current.children[part] ?? {
                    allowed: false,
                    children: {},
                };
                current.children[part] = picked;
                current = picked;
            }
            current.allowed = !negative;
        }
        this.parsed = parsed;
    }
    check(namespace) {
        if (namespace === "")
            return this.parsed.allowed;
        const chain = namespace.split(":").map(part => part.trim());
        let current = this.parsed;
        let tentative = current.allowed;
        for (const part of chain) {
            let picked = current.children[part];
            if (!picked)
                return tentative ?? false;
            // tentatively allow unless explicitly disabled by a descendant
            tentative = picked.allowed;
            current = picked;
        }
        return current.allowed;
    }
}
exports.Namespaces = Namespaces;
