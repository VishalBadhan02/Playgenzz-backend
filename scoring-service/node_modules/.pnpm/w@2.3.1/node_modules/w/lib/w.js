"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.namespaces = void 0;
exports.w = w;
const context_ts_1 = require("./context.js");
const colours_ts_1 = require("./colours.js");
const env_ts_1 = require("./env.js");
const namespacing_ts_1 = require("./namespacing.js");
function noop() { }
const DEBUG = (0, env_ts_1.env)("DEBUG");
const stderr = context_ts_1.context.process?.stderr;
const useColour = (0, env_ts_1.env)("FORCE_COLOR") || (!(0, env_ts_1.env)("NO_COLOR") && (stderr?.isTTY ?? context_ts_1.context.document) && !(0, env_ts_1.env)("CI"));
const cons = context_ts_1.context.console.Console?.(stderr) ?? context_ts_1.context.console;
const pick = (level) => (cons[level] ?? cons.log ?? noop).bind(cons);
const ns = (n) => (n ? n + " " : "");
/**
 * The underlying namespace manager.
 */
exports.namespaces = new namespacing_ts_1.Namespaces(DEBUG);
/**
 * Create a debug instance for a namespace.
 *
 * @example
 * ```ts
 * import { w } from "w";
 * const log = w("app");
 * log("hello");
 * ```
 *
 * Logging for given namespace is enabled when the `DEBUG` environment variable includes the namespace.
 * Multiple namespaces can be enabled by separating them with commas.
 *
 * ```sh
 * DEBUG=app:init,app:auth,server:* bun run app.ts
 * ```
 *
 * @param namespace - The namespace to debug.
 * @returns A debug instance.
 */
function w(namespace = "") {
    const debugfn = (...data) => {
        const start = data.length ? data.shift() : "";
        if (!debugfn.enabled)
            return;
        // will fallback to the no-colour logger if useColour is false
        if (context_ts_1.context.document && useColour)
            debugfn.logger(`%c${ns(namespace)}%c${start}`, `color: #${(0, colours_ts_1.selectColour)(namespace)[3]}`, "color: inherit", ...data);
        else {
            const name = useColour ? (0, colours_ts_1.colourNs)(namespace) : namespace;
            debugfn.logger(ns(name) + start, ...data);
        }
    };
    debugfn.enabled = exports.namespaces.check(namespace);
    debugfn.logger = pick("debug");
    debugfn.panic = function panic(...data) {
        const alertmsg = "PANIC! " + data.join(" ");
        if ((0, env_ts_1.env)("W_PANIC_THROWS"))
            throw new Error(alertmsg);
        try {
            debugfn.logger = pick("error");
            debugfn.enabled = true;
            debugfn("PANIC! " + (data.shift() ?? ""), ...data, "\n");
            debugfn.logger(new Error());
        }
        catch { }
        debugger;
        for (;;)
            try {
                context_ts_1.context.process?.exit(1);
                context_ts_1.context.alert?.(alertmsg);
            }
            catch { }
    };
    return debugfn;
}
