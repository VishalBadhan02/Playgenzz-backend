version: '3.8' # Add version

services:
  api-gateway-service:
    build:
      #context: . # Changed from ./api-gateway to . for proto files access
      dockerfile: api-gateway/Dockerfile
    ports:
      - "7000:7000"
    # volumes:
    #   - ./api-gateway:/app/api-gateway
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy # Add health check
      kafka:
        condition: service_healthy

    environment:
      - MONGODB_URL=mongodb://mongodb:27017/api-gateway-db
      - KAFKA_BROKERS=kafka:9092
      - HOST=0.0.0.0
      - PORT=7000
      - NODE_ENV=development
      - JWT_SECRET=vishal123
      - SOCKET_PORT=5060 # need to be changed
      # Service Discovery Environment Variables
      - AUTH_SERVICE_HOST=auth-service
      - USER_SERVICE_HOST=user-service
      - TEAM_SERVICE_HOST=team-service
      - NOTIFICATION_SERVICE_HOST=notification-service
      - TOURNAMENT_SERVICE_HOST=tournament-service
      - VENUE_SERVICE_HOST=venue-service
      # Service Ports
      - AUTH_PORT=7001
      - NOTIFICATION_PORT=7002
      - SCORING_PORT=7004
      - TEAM_PORT=7005
      - TOURNAMENT_PORT=7006
      - USER_PORT=7007
      - VENUE_PORT=7008
    # Add protos volume
    networks:
      - api-gateway-network
      # - auth-network
      # - notification-network
      # - team-network
      # - tournament-network
      # - user-network
      # - venue-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f http://0.0.0.0:7000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5
  auth-service:
    build:
      context: . # Changed for proto files access
      dockerfile: auth-service/Dockerfile
    ports:
      - "7001:7001"
    # volumes:
    #   - ./auth-service:/app/auth-service
    depends_on:
      # auth-db:
      #   condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - auth-service/.env
    environment:
      - DATABASE_URL=postgresql://neondb_owner:npg_x1BUfplakEZ6@ep-orange-firefly-a8bpj5dl-pooler.eastus2.azure.neon.tech/neondb?sslmode=require
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:

      - api-gateway-network

  auth-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-auth-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-auth-password}
      POSTGRES_DB: auth-db
    ports:
      - "5433:5432"
    volumes:
      - auth-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U auth-user" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - auth-network

  notification-service:
    build:
      context: .
      dockerfile: notification-service/Dockerfile
    ports:
      - "7002:7002"
    # volumes:
    #   - ./notification-service:/app/notification-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/notification-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - notification-network

  scoring-service:
    build:
      context: .
      dockerfile: scoring-service/Dockerfile
    ports:
      - "7004:7004"
    # volumes:
    #   - ./scoring-service:/app/scoring-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/scoring-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - scoring-network
    healthcheck:
      # âœ… Added healthcheck
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/scoring-db --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  team-service:
    build:
      context: .
      dockerfile: team-service/Dockerfile
    ports:
      - "7003:7003"
    # volumes:
    #   - ./team-service:/app/team-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/team-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - team-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:PORT/health" ] # Change PORT as needed
      interval: 30s
      timeout: 10s
      retries: 5

  tournament-service:
    build:
      context: .
      dockerfile: tournament-service/Dockerfile
    ports:
      - "7006:7006"
    # volumes:
    #   - ./tournament-service:/app/tournament-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/tournament-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - tournament-network

  user-service:
    build:
      context: .
      dockerfile: user-service/Dockerfile
    ports:
      - "7005:7005"
    # volumes:
    #   - ./user-service:/app/user-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/user-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - user-network
      - api-gateway-network

  venue-service:
    build:
      context: .
      dockerfile: venue-service/Dockerfile
    ports:
      - "7008:7008"
    # volumes:
    #   - ./venue-service:/app/venue-service
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/venue-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - venue-network
      - api-gateway-network

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api-gateway-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api-gateway-network
      - auth-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network
      - scoring-network

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network
      - auth-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network
volumes:
  auth-data:
  mongodb-data:

networks:
  api-gateway-network:
    driver: bridge
  auth-network:
    driver: bridge
  notification-network:
    driver: bridge
  team-network:
    driver: bridge
  tournament-network:
    driver: bridge
  user-network:
    driver: bridge
  venue-network:
    driver: bridge
  scoring-network:
    driver: bridge
  kafka-network:
    driver: bridge
