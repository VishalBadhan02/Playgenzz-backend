version: '3.8'

services:
  api-gateway-service:
    build:
      context: .
      dockerfile: api-gateway/Dockerfile
    ports:
      - "8995:7000"
    restart: unless-stopped
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/api-gateway-db
      - KAFKA_BROKERS=kafka:9092
      - HOST=0.0.0.0
      - PORT=7000
      - NODE_ENV=development
      - JWT_SECRET=vishal123
      - SOCKET_PORT=5060
      - AUTH_SERVICE_HOST=auth-service
      - USER_SERVICE_HOST=user-service
      - TEAM_SERVICE_HOST=team-service
      - NOTIFICATION_SERVICE_HOST=notification-service
      - TOURNAMENT_SERVICE_HOST=tournament-service
      - VENUE_SERVICE_HOST=venue-service
      - AUTH_PORT=7001
      - NOTIFICATION_PORT=7002
      - SCORING_PORT=7004
      - TEAM_PORT=7005
      - TOURNAMENT_PORT=7006
      - USER_PORT=7007
      - VENUE_PORT=7008
    networks:
      - api-gateway-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7000/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 5

  auth-service:
    build:
      context: ./
      dockerfile: auth-service/Dockerfile
      args:
        INCLUDE_PROTOS: "false"
    ports:
      - "7001:7001"
    volumes:
      - .auth-service:/app/auth-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    env_file:
      - auth-service/.env
    environment:
      - DATABASE_URL=postgresql://neondb_owner:npg_x1BUfplakEZ6@ep-orange-firefly-a8bpj5dl-pooler.eastus2.azure.neon.tech/neondb?sslmode=require
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network

  # auth-db:
  #   image: postgres:15
  #   environment:
  #     POSTGRES_USER: ${POSTGRES_USER:-auth-user}
  #     POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-auth-password}
  #     POSTGRES_DB: auth-db
  #   ports:
  #     - "5433:5432"
  #   volumes:
  #     - auth-data:/var/lib/postgresql/data
  #   healthcheck:
  #     test: [ "CMD-SHELL", "pg_isready -U auth-user" ]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 5
  #   networks:
  #     - auth-network

  notification-service:
    build:
      context: ./
      dockerfile: notification-service/Dockerfile
    ports:
      - "7002:7002"
    volumes:
      - .notification-service:/app/notification-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/notification-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - notification-network

  scoring-service:
    build:
      context: ./
      dockerfile: scoring-service/Dockerfile
    ports:
      - "7004:7004"
    volumes:
      - .scoring-service:/app/scoring-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/scoring-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - scoring-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/scoring-db --quiet
      interval: 5s
      timeout: 5s
      retries: 5

  team-service:
    build:
      context: ./
      dockerfile: team-service/Dockerfile
    ports:
      - "7005:7005"
    volumes:
      - ./team-service:/app/team-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/team-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - team-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:7005/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  tournament-service:
    build:
      context: ./
      dockerfile: tournament-service/Dockerfile
    ports:
      - "7006:7006"
    volumes:
      - ./tournament-service:/app/tournament-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/tournament-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - tournament-network

  user-service:
    build:
      context: ./
      dockerfile: user-service/Dockerfile
    ports:
      - "7007:7007"
    volumes:
      - ./user-service:/app/user-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/user-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - user-network

  venue-service:
    build:
      context: ./
      dockerfile: venue-service/Dockerfile
    ports:
      - "7008:7008"
    volumes:
      - ./venue-service:/app/venue-service
      #     - ./protos:/app/protos
    command: pnpm dev
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - MONGODB_URL=mongodb://mongodb:27017/venue-db
      - REDIS_URL=redis
      - KAFKA_BROKERS=kafka:9092
    networks:
      - api-gateway-network
      - venue-network

  mongodb:
    image: mongo:latest
    ports:
      - "27018:27017"
    volumes:
      - mongodb-data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api-gateway-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - api-gateway-network
      - auth-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network
      - scoring-network

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo stat | nc localhost 2181
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network

  kafka:
    image: confluentinc/cp-kafka:6.2.0
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - kafka-network
      - auth-network
      - notification-network
      - team-network
      - tournament-network
      - user-network
      - venue-network

volumes:
  auth-data:
  mongodb-data:


networks:
  api-gateway-network:
    driver: bridge
  auth-network:
    driver: bridge
  notification-network:
    driver: bridge
  team-network:
    driver: bridge
  tournament-network:
    driver: bridge
  user-network:
    driver: bridge
  venue-network:
    driver: bridge
  scoring-network:
    driver: bridge
  kafka-network:
    driver: bridge
